install.packages("devtools")
install.packages("roxygen2")
getwd()
library(tidyverse)
rng.df <- data.frame(x.pr = runif(1000), y.pr = runif(1000))
set.seed(123)
rng.df <- data.frame(x.pr = runif(1000), y.pr = runif(1000))
c(rng.df$x.qr, rng.df$y.qr) <- qrng::ghalton(1000, d = 2)
rng.df[, c("x.qr", "y.qr")] <- qrng::ghalton(1000, d = 2)
rng.df
set.seed(123)
rng.df <- data.frame(x.pr = runif(1000), y.pr = runif(1000))
rng.df[, c("x.qr", "y.qr")] <- qrng::ghalton(1000, d = 2)
library(cowplot)
library(rpapers)
set_paper_plot_specs()
p_pr <- rng.df %>%
ggplot(aes(x = x.pr, y = y.pr)) +
geom_point(alpha = 0.5) +
labs(x = "x", y = "y", title = "Pseudo Random Numbers")
p_pr
p_qr <- rng.df %>%
ggplot(aes(x = x.qr, y = y.qr)) +
geom_point(alpha = 0.5) +
labs(x = "x", y = "y", title = "Quasi Random Numbers")
p_combined <- plot_grid(p_pr, p_qr)
p_combined
p_pr <- rng.df %>%
ggplot(aes(x = x.pr, y = y.pr)) +
geom_point(alpha = 0.5) +
labs(x = "x", y = "y", title = "Pseudo Random Numbers", xlim = c(0, 1))
rng.df %>%
ggplot(aes(x = x.pr, y = y.pr)) +
geom_point(alpha = 0.5) +
labs(x = "x", y = "y", title = "Pseudo Random Numbers", xlim = c(0, 1), ylim = c(0,1))
p_pr <- rng.df %>%
ggplot(aes(x = x.pr, y = y.pr)) +
geom_point(alpha = 0.5) +
labs(x = "x", y = "y", title = "Pseudo Random Numbers", xlim = c(0, 1), ylim = c(0,1)) +
coord_cartesian()
p_pr
p_pr
warnings()
?set_paper_plot_specs
?theme_paper
??paper_theme
?paper_theme
theme_set(paper_theme("ibm"))
p_pr <- rng.df %>%
ggplot(aes(x = x.pr, y = y.pr)) +
geom_point(alpha = 0.5) +
labs(x = "x", y = "y", title = "Pseudo Random Numbers", xlim = c(0, 1), ylim = c(0,1)) +
coord_cartesian()
set_paper_plot_specs()
theme_set(paper_theme("ibm"))
p_pr <- rng.df %>%
ggplot(aes(x = x.pr, y = y.pr)) +
geom_point(alpha = 0.5) +
labs(x = "x", y = "y", title = "Pseudo Random Numbers", xlim = c(0, 1), ylim = c(0,1)) +
coord_cartesian()
p_pr
p_pr <- rng.df %>%
ggplot(aes(x = x.pr, y = y.pr)) +
geom_point(alpha = 0.5) +
labs(x = "x", y = "y", title = "Pseudo Random Numbers") +
coord_cartesian(xlim = c(0, 1), ylim = c(0,1))
p_pr
p_pr
p_pr <- rng.df %>%
ggplot(aes(x = x.pr, y = y.pr)) +
geom_point(alpha = 0.5) +
labs(x = "x", y = "y", title = "Pseudo Random Numbers") +
scale_x_continuous(limits = c(0, 1)) +
scale_y_continuous(limits = c(0,1))
p_pr
p_pr <- rng.df %>%
ggplot(aes(x = x.pr, y = y.pr)) +
geom_point(alpha = 0.5) +
labs(x = "x", y = "y", title = "Pseudo Random Numbers") +
coord_cartesian(expand = FALSE)
p_pr <- rng.df %>%
ggplot(aes(x = x.pr, y = y.pr)) +
geom_point(alpha = 0.5) +
labs(x = "x", y = "y", title = "Pseudo Random Numbers") +
coord_cartesian(expand = FALSE, xlim = c(0, 1), ylim = c(0, 1))
p_pr
p_pr <- rng.df %>%
ggplot(aes(x = x.pr, y = y.pr)) +
geom_point(alpha = 0.5) +
labs(x = "x", y = "y", title = "Pseudo Random Numbers") +
coord_cartesian(expand = FALSE)
p_pr <- rng.df %>%
ggplot(aes(x = x.pr, y = y.pr)) +
geom_point(alpha = 0.5) +
labs(x = "x", y = "y", title = "Pseudo Random Numbers") +
coord_cartesian(expand = FALSE)
p_pr
p_pr <- rng.df %>%
ggplot(aes(x = x.pr, y = y.pr)) +
geom_point(alpha = 0.5) +
labs(x = "x", y = "y", title = "Pseudo Random Numbers") +
coord_cartesian(expand = FALSE, xlim = c(0, 1), ylim = c(0, 1))
p_qr <- rng.df %>%
ggplot(aes(x = x.qr, y = y.qr)) +
geom_point(alpha = 0.5) +
labs(x = "x", y = "y", title = "Quasi Random Numbers") +
coord_cartesian(expand = FALSE, xlim = c(0, 1), ylim = c(0, 1))
p_combined <- plot_grid(p_pr, p_qr)
p_combined
warnings()
theme_set(theme_stata)
theme_set(theme_stata())
ggthemes::theme_stata()
theme_set(ggthemes::theme_stata())
p_pr <- rng.df %>%
ggplot(aes(x = x.pr, y = y.pr)) +
geom_point(alpha = 0.5) +
labs(x = "x", y = "y", title = "Pseudo Random Numbers") +
coord_cartesian(expand = FALSE, xlim = c(0, 1), ylim = c(0, 1)) +
theme()
p_qr <- rng.df %>%
ggplot(aes(x = x.qr, y = y.qr)) +
geom_point(alpha = 0.5) +
labs(x = "x", y = "y", title = "Quasi Random Numbers") +
coord_cartesian(expand = FALSE, xlim = c(0, 1), ylim = c(0, 1)) +
theme_bw()
p_combined <- plot_grid(p_pr, p_qr)
p_combined
p_qr <- rng.df %>%
ggplot(aes(x = x.qr, y = y.qr)) +
geom_point(alpha = 0.5) +
labs(x = "x", y = "y", title = "Quasi Random Numbers") +
coord_cartesian(expand = FALSE, xlim = c(0, 1), ylim = c(0, 1))
p_combined <- plot_grid(p_pr, p_qr)
p_combined
ggsave("./Simulations/Plots/qrng_vs_prng.pdf", plot = p_combined, width = 10,
height = 3)
ggsave("./Simulations/Plots/qrng_vs_prng.pdf", plot = p_combined, width = 10,
height = 4.5)
theme_set(ggthemes::theme_economist())
p_pr <- rng.df %>%
ggplot(aes(x = x.pr, y = y.pr)) +
geom_point(alpha = 0.5) +
labs(x = "x", y = "y", title = "Pseudo Random Numbers") +
coord_cartesian(expand = FALSE, xlim = c(0, 1), ylim = c(0, 1)) +
theme()
p_qr <- rng.df %>%
ggplot(aes(x = x.qr, y = y.qr)) +
geom_point(alpha = 0.5) +
labs(x = "x", y = "y", title = "Quasi Random Numbers") +
coord_cartesian(expand = FALSE, xlim = c(0, 1), ylim = c(0, 1))
p_combined <- plot_grid(p_pr, p_qr)
p_combined
ggsave("./Simulations/Plots/qrng_vs_prng.pdf", plot = p_combined, width = 10,
height = 4.5)
if (!require(truncnorm)) install.packages("truncnorm")
nSim <- 1000000
f <- function(x) 1/sqrt(2*pi*1)*exp(-1/2*(x-2)^2)
M <- 1.5
g <- function(x) ifelse(x>=-1 & x <= 1.4, 1, 0)
sample <- runif(nSim, -1, 1.4)
u <- runif(nSim)
result <- sample[u<=f(sample)/(M*g(sample))]
par(mfrow = c(1,2))
curve(dtruncnorm(x, a = -1, b = 1.4, mean =2, sd =1), xlim = c(-1, 1.4),
ylab = "Density", col = 1)
lines(density(result), col = 2)
legend("topleft", legend = c("truncnorm", "Acc-Rej-Sampling"),
col = c(1,2), lty = c(1,1))
hist(sample, main = "", xlab = "x", col = 'skyblue')
hist(result, add = TRUE, col = 'darkblue')
rm(list = ls())
library(qrng)
library(tidyverse)
library(cowplot)
library(ggthemes)
theme_set(ggthemes::theme_economist())
set.seed(123)
rng.df <- data.frame(x.pr = runif(1000), y.pr = runif(1000))
rng.df[, c("x.qr", "y.qr")] <- qrng::ghalton(1000, d = 2)
p_pr <- rng.df %>%
ggplot(aes(x = x.pr, y = y.pr)) +
geom_point(alpha = 0.5) +
labs(x = "x", y = "y", title = "Pseudo Random Numbers") +
coord_cartesian(expand = FALSE, xlim = c(0, 1), ylim = c(0, 1)) +
theme()
p_qr <- rng.df %>%
ggplot(aes(x = x.qr, y = y.qr)) +
geom_point(alpha = 0.5) +
labs(x = "x", y = "y", title = "Quasi Random Numbers") +
coord_cartesian(expand = FALSE, xlim = c(0, 1), ylim = c(0, 1))
p_combined <- plot_grid(p_pr, p_qr)
p_combined
if (!require(truncnorm)) install.packages("truncnorm")
nSim <- 1000000
f <- function(x) 1/sqrt(2*pi*1)*exp(-1/2*(x-2)^2)
M <- 1.5
g <- function(x) ifelse(x>=-1 & x <= 1.4, 1, 0)
sample <- runif(nSim, -1, 1.4)
u <- runif(nSim)
result <- sample[u<=f(sample)/(M*g(sample))]
par(mfrow = c(1,2))
curve(dtruncnorm(x, a = -1, b = 1.4, mean =2, sd =1), xlim = c(-1, 1.4),
ylab = "Density", col = 1)
lines(density(result), col = 2)
legend("topleft", legend = c("truncnorm", "Acc-Rej-Sampling"),
col = c(1,2), lty = c(1,1))
hist(sample, main = "", xlab = "x", col = 'skyblue')
hist(result, add = TRUE, col = 'darkblue')
sample.prng <- runif(nSim, -1, 1.4)
u.prng <- runif(nSim)
result.prng <- sample.prng[u.prng<=f(sample.prng)/(M*g(sample.prng))]
sample.qrng <- runif(nSim, -1, 1.4)
u.qrng <- runif(nSim)
result.qrng <- sample.qrng[u.qrng<=f(sample.qrng)/(M*g(sample.qrng))]
nSim <- 1000000
f <- function(x) 1/sqrt(2*pi*1)*exp(-1/2*(x-2)^2)
M <- 1.5
g <- function(x) ifelse(x>=-1 & x <= 1.4, 1, 0)
sample.prng <- runif(nSim, -1, 1.4)
u.prng <- runif(nSim)
result.prng <- sample.prng[u.prng<=f(sample.prng)/(M*g(sample.prng))]
sample.qrng <- runif(nSim, -1, 1.4)
u.qrng <- runif(nSim)
result.qrng <- sample.qrng[u.qrng<=f(sample.qrng)/(M*g(sample.qrng))]
par(mfrow = c(2,2))
curve(dtruncnorm(x, a = -1, b = 1.4, mean =2, sd =1), xlim = c(-1, 1.4),
ylab = "Density", col = 1)
lines(density(result.prng), col = 2)
legend("topleft", legend = c("truncnorm", "Acc-Rej-Sampling prng"),
col = c(1,2), lty = c(1,1))
hist(sample.prng, main = "", xlab = "x", col = 'skyblue')
hist(result.prng, add = TRUE, col = 'darkblue')
curve(dtruncnorm(x, a = -1, b = 1.4, mean =2, sd =1), xlim = c(-1, 1.4),
ylab = "Density", col = 1)
lines(density(result.qrng), col = 2)
egend("topleft", legend = c("truncnorm", "Acc-Rej-Sampling qrng"),
col = c(1,2), lty = c(1,1))
par(mfrow = c(2,2))
curve(dtruncnorm(x, a = -1, b = 1.4, mean =2, sd =1), xlim = c(-1, 1.4),
ylab = "Density", col = 1)
lines(density(result.prng), col = 2)
legend("topleft", legend = c("truncnorm", "Acc-Rej-Sampling prng"),
col = c(1,2), lty = c(1,1))
hist(sample.prng, main = "", xlab = "x", col = 'skyblue')
hist(result.prng, add = TRUE, col = 'darkblue')
curve(dtruncnorm(x, a = -1, b = 1.4, mean =2, sd =1), xlim = c(-1, 1.4),
ylab = "Density", col = 1)
lines(density(result.qrng), col = 2)
legend("topleft", legend = c("truncnorm", "Acc-Rej-Sampling qrng"),
col = c(1,2), lty = c(1,1))
hist(sample.qrng, main = "", xlab = "x", col = 'skyblue')
hist(result.qrng, add = TRUE, col = 'darkblue')
u.qrng <- qrng(n = nSim, d = 1)
u.qrng <- ghalton(n = nSim, d = 1)
result.qrng <- sample.qrng[u.qrng<=f(sample.qrng)/(M*g(sample.qrng))]
par(mfrow = c(2,2))
curve(dtruncnorm(x, a = -1, b = 1.4, mean =2, sd =1), xlim = c(-1, 1.4),
ylab = "Density", col = 1)
lines(density(result.prng), col = 2)
legend("topleft", legend = c("truncnorm", "Acc-Rej-Sampling prng"),
col = c(1,2), lty = c(1,1))
hist(sample.prng, main = "", xlab = "x", col = 'skyblue')
hist(result.prng, add = TRUE, col = 'darkblue')
curve(dtruncnorm(x, a = -1, b = 1.4, mean =2, sd =1), xlim = c(-1, 1.4),
ylab = "Density", col = 1)
lines(density(result.qrng), col = 2)
legend("topleft", legend = c("truncnorm", "Acc-Rej-Sampling qrng"),
col = c(1,2), lty = c(1,1))
hist(sample.qrng, main = "", xlab = "x", col = 'skyblue')
hist(result.qrng, add = TRUE, col = 'darkblue')
result.qrng
curve(dtruncnorm(x, a = -1, b = 1.4, mean =2, sd =1), xlim = c(-1, 1.4),
ylab = "Density", col = 1)
lines(density(result.prng), col = 2)
legend("topleft", legend = c("truncnorm", "Acc-Rej-Sampling"),
col = c(1,2), lty = c(1,1))
library(tidyverse)
pl <- read_csv("Simulations/Data/premierleague.csv")
pl <- read_csv("./Simulations/Data/premierleague.csv")
pl <- read_csv("./Simulations/Data/premiereleague.csv")
head(pl)
?read_csv
View(pl)
pl <- read_csv("./Simulations/Data/premiereleague.csv",
col_names = c("home", "score1", "score2", "away"))
pl
